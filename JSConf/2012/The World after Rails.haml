%h2 The World after Rails
%i Solomon Hykes (@solomanstre)
%p This is about the world after web apps as we know them.
%p Something really important is going on in the world of web apps, we need to define it.
%b Some history
%p In the 1990s you were writing Visual C++, Java Swing, Qt, etc.
%p You wrote desktop applications.
%b what happened?
%p Phase I: New capabilities
%ul
  %li Lots of browsers appeared in the wild (homes and offices)
  %li Servers were able to geenrate HTML programmatically! (the future!)
  %li You could even have different HTML going to different browsers.
%p Phase II: Hacks
%ul
  %li excite in 1993 made the web expandable.
  %li in 1995 Viaweb made apache powerful.
  %li when hackers come together you get...
%p Phase III: Tools
%ul
  %li 1995: the CGI spec is invented
  %li 1995: PHP is invented
  %li 1997: CGI.pm is invented
  %li when tools become cool and polished enough you get...
%p Phase IV: World domination
%ul
  %li Rails, cake, django...
  %li How did we live wothout these frameworks!?
%b What now? The new phases.
%p Phase I: New capabilities
%ul
  %li 1 billion smart phones in the world and growing.
  %li that means 1 billion JS VMs
  %li The cloud. The cloud is like a candy store for developers.
  %li Whatever you want, someone out there has already written it...and it is probably written in the cloud.
  %li What is out there is an explosion of powerful tools that are free and open source available to you. It is insane.
%p Phase II: Hacks
%ul
  %li 2004 Gmail
  %li we are jumping to...
%p Phase III: Tools
%ul
  %li There are SO MANY tools out there in the web world.
  %li How can we track them all...
%p Client-side MVC is one of the most advanced toolset changes (backbone, angularJS, KnockOut, BatmanJS, etc.)
%p Model Synchronization is really gaining steam with tols like RacerJS and Ember-data (where are your data coming from?)
%p Building and dependency tools are still young: grunt, Hem, Jake, etc.
%p RPC Services are still being addressed. Being addressed with protobuf, thrift, stack.io, etc.
%b The principle of big apps: Don't write big apps.
%p Native capabilities: PhoneGap, trigger.io (still very young)
%p UI Components: Twitter Bootstrap, Foundation, YUI, jQuery UI (these are getting more mature by the day)
%p Communication transports: HTTP is king, but when will something better come out (0mq, redis, other TCP transports...)
%p The takeaway here is that it is all about hacking, but we have to tell the story to the world WHY what we are doing is o cool!

