%h2 JavaScriptCore Performance Work
%i Andy Wingo
%p There are 4 general techniques for speeding up an algorithm:
%ol
  %li Caching
  %li Compiling
  %li Delaying computation [laziness]
  %li Indexing [better big-O data structures]
%p Don't implement code until it is run!
%p JSC compiles your code into bytecode:
%ol
  %li first it is interpreted to cold code with LLInt
  %li then it is compiled to warm code with the Baseline JIT
  %li then it is optimized to hot code with the DFG JIT
%p The LLInt is the "Low-Level Interpreter." The interperter will not parse your function, it is just checked for correctness and turned into bytecode (looks like Assembly)
%p The generated bytecode is interpreted in a domain-specific assembly langiuage created in Ruby! (that is what LLInt is)
%p Having the LLInt interpreter makes JSC much faster. It gives JavaScript a real bytecode, like Java.
%b Biseline JIT: The Tier 1 compiler
%p Baseline JIT is an LLInt without dispatch. (It's OK)
%b Data Flow Graph (DFG) JIT: The Tier 2
%p DFG is the optimized compiler that makes your code as streamlines and crazy as possible.
%p (This is some heady stuff. Sorry if I'm not rockin' the notes.)
%p We need concurrency to make JavaScript compiling better.
%p JSC is working on a parallel garbage collector.
%p Thanks to Andy for the great brain-flipping talk!
