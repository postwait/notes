%h2 Pivotal Labs
%i Ian McFarland (@imf)
%p Founded in 1989, Agile since the '90s, Rails since 2006
%p A Typical Day at Pivotal
%ul
  %li The culture of a place is central to the place
  %li Starts with breakfast at 8:45
  %li Stand up at 9:07 (people are better with an exact time)
  %li
    A stand-up for 50 people!?!
    %ul
      %li Help
      %li Interesting Stuff
      %li Introductions to new peeps
      %li Stretching
      %li a white board to capture help and interesting stuff.
      %li If you don't have anyhting interesting to say, you don't say anything.
  %li Then there are team stand-ups
  %li Then people pair up! (pair programming!!!)
  %li The pivots often pair with their clients.
  %li There are build monitors everywhere
  %li The product owners are on site
  %li Break for lunch (one hour)
  %li Wednesdays are for Tech Talks http://pivotallabs.com/talks
  %li Back to programming.
  %li There are email stations at the end of each row. Do NOT check email while pairing.
  %li Pairs are for coding!
  %li Pivot Pong: Pairs playing ping pong
  %li People go home at 6! A sustainable pace is REALLY important and effective.
%p The theory behind breakfast: Having a breakfast makes people more evened out throughout the morning. And it allows pivots to socialize in the morning.
%p Pivot Pong: It turns out teams like to play ping pong together.
%p ask@pivotallabs.com: You send an email to ask and things magically come to you.
%ul
  %li They make things convenient for you.
  %li Lots of books when you want them
  %li Simple things are easy to just buy and have for people to use.
%p Getting clients and devs in the space are critical
%ul
  %li Having consistent pairing stations is important. Since no one has a desk of their own.
  %li There is an open workspace
  %li Big visual build monitors show when the build is broken.
%p There is a single dev workstation image
%ul
  %li The system is reimaged after every project
  %li A brand-new machine is ready to go really fast.
  %li Automating this process makes upgrading to new OSes or systems is a pain point.
  %li The image is updated through ask requests. (I don't agree with this loosey goosey way of maintaining machines...)
%p Why Developer Happiness is Important to the Business
%ul
  %li Devs are happy when they are not overworked
  %li Having a sustainable work week (no overworking) makes devs happy
  %li Letting your devs have a life outside of work is a goodness for your people and your deadlines.
  %li Grunt Work = Money Wasted
  %li A happy dev is one that is working on the hard problems. Working on the dumb shit makes us sad campers.
%p Have community events. Bring people in from the outside. It is fun and educational.
%p How do you go about having one culture among a lot of different locations?
%ul
  %li It is like sourdough. You have a starter, and you pass that around.
  %li So you have a starter dev go to form a different office and add local talent. (Magic occurs!)
  %li The cultures will vary slightly, but you will have some main uniform core ideas.
%p Pair programming allows you to see how other people think very rapidly.
%p Rotations: It is also kinda cool to allow your devs to travel to other offices. (fun travel times!!)
%p They do not like to work with remotes for the most part. Having that connection with other devs matters.
%ul
  %li All their meeting rooms are set up at teleconference rooms: You can do it with a Mac Mini, a snowball mike, a couple cameras, and keyboards. It is possible under $1500
  %li Remote pairing is possible with things like VNC. Having video makes a BIG difference. Screen sharing is not enough. Visual queues are important.
%b Other communities say, "Oh you are doing agile? That is interesting." The Rails community says, "Oh you AREN'T doing agile? What are you, an idiot?"
%p All our decisions are business driven
%ul
  %li Done has to mean done. So you put the feature in front of the customer and if they say it is done, then it is done!
%p TDD/BDD: The important thing about tests is not that the tests pass; it is that writing tests changes the way you write code.
%p (Check out jasmine for test driving your javascript instead in JSUnit)
%b TEST DRIVE EVERYTHING!
%p Continuous Integration: Just because you can doesn't mean you have to. Now the decision to release is a business decision, not a tech decision
%b You really have to pair to become efficient!
%p What do devs really do?
%ul
  %li Code
  %li reading web pages about coding
  %li Stuck on a problem
  %li Checking email
  %li Goofing off
%ul
  %li 80/20 rule. You don't get stuck as much.
  %li When you are doing less grunt work, you are doing more design.
  %li Cultural and knowledge transfer is critical.
  %li Pairing allow you to focus a LOT more.
  %li When you pair, a 40-hour work week is 40-hours of CODING. Real coding.
  %li Your pairs are taking up fewer threads.
  %li Yu are productive on your FIRST day. Your first half hour. Yes, it CAN happen!
  %li You can take away one person from a team and have them teach another team about the system, because everyone touches everything.
%p There should be at least one person on a project for the life of the project, but other devs can rotate in and out. They are the anchor.
%b We do not believe in specializations!
%p Some people will be stronger than others, but that doesn't mean that the specialist should work in isolation.
%p Agile is not a religion
%ul
  %li Nothing is sacred
  %li Agile means that if some other method comes along that is awesome, we can use this.
  %li The point of agile is that you can change your ideas of what is good quickly.
%p It is really important for clients to learn good habits from from pivots that already have those good habits. If you do this, you can make the clients agents of change at their companies.
%p It is important to ramp up the developers at the client. There should NOT be a dependency to Pivotal. The goal is for the pivots to become obsolete and have the devs ultimately take over. (I want to work with these guys!)
%h3 Hiring
%ul
  %li The Two-beer Test: Will you still like talking to this guys after two beers?
  %li Don't keep people that don't fit into the culture
  %li
    %b Hire people better than you!
  %li Make sure that you hire people that add value to your group
%p (WAU! That was a great talk!)