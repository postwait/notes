%h2 #Agile2014 Curing Featuritis (Notes)
%i Todd Olson
%p We want simplicity, not complexity in most of the products we use. Adding more features often do not result in extra sales.
%p When we cramp features into our products, we start to make them feel stupid if they cannot figure out how to get things done in your product.
%p We need to change the way we think about success. Value is greater than throughput. If you ship 20 bad features, those are still bad features...
%p When you measure people on throughput, you get a lot of features, but not a lot of value.
%p When you ask the customer if they want feature A or feature B, they will say they want both. Customers are no good at speculating the future use of your system.
%b Don't try to predict. Experiment.
%p Build something and give it to your customers. Don't try to guess or ask what they want, instead have your customers play with your experiments. Evolve the successes and dump the failures.
%p Ask the customers where the real pain is. Start with something and iterate with the customer feedback in mind.
%p Build slack to incorporate learning. Don't make your schedules so tight that you cannot deal with the feedback you get from the customers.
%p We often confuse not knowing about a feature vs. a feature not being good vs. a feature not being useful. You can have a useful feature with a too-high barrier, or a good feature that isn't useful. Or maybe the customers just don't know about a feature existing at all.
%p Making sure people know about your features are almost more important than the features themselves. Your customers full-time job is PROBABLY NOT using your software, so pointing features out to the customers is a good thing.
%p "Shouldn't your UI be discoverable?" - well yes, but the average US attention span is about 5 seconds. That is very short. When you make complex features your customers are less interested in complex systems.
%p Guide your customers to collect better data. If your goal is making the perfect UI, you will constantly be searching. there is no perfect UI. You just have to continue to educate.
%p Practice hallway usability testing. Your co-workers are a great sounding board.
%p Testing is a fantastic way to try out new UIs.
%p If we can prove that customers know about a feature AND that they think it is a good feature, but they are still not using it, it might just not be useful. That feature should be de-prioritized.
%p You have to understand "what is better" for your customers and try to avoid vanity metrics. If your metrics do not provide value back to the customer, those are useless metrics.
%h3 Questions to ask when thinking about what to measure
%ul
  %li What are the goal(s) of your software?
  %li What problems are you solving?
  %li How are you providing value to your customers?
%p Looking at WHO is using a feature matters. If you have a feature that is only used once a month, but the one person that uses it had the buying power in your customer's company. That less-used feature becomes very important.
%p Feature funnels - This is the concept of trying to convert people to use a feature to get to an outcome they desire. This works exactly the same as marketing funnels. We can analyze what customers do and where they fall off when trying to use a feature.
%p REMOVE FEATURES! Less features are better. You don't have to remove the feature, but you can hide it. The more buttons you have the less your customers will use your products.
%p Take things away from customers. Making clean UIs with less features makes it more likely that customers will use your products. Some of your customers will complain, but that is OK.
%p Hide the features that you have to have JUST to win deals. If your sales people need you to implement something stupid to win an elephant, do it, but make it hard to get to. That is A-OK.
%p Prefer to remove features. If customers complain loudly, you can always add them back, but make sure your customers care in the first place.
%b Never assume that your customers understand your system.
%p Remember the goal is value. Experiment. Experiment. Experiment. Do it now. Your product will be better for it.