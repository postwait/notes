%h2 Ruby DCamp 2010 Session 1: JavaScript Testing
%i Evan Light, et. al.
%p SauceLabs - an HTML/JavaScript testing tool. This is a paid service ($5000/10,000 browser tests), but they save all the results and give you detailed reports.
%p HolyGrail - You can use this to hook into the DOM through Ruby, but it is not 100%. It is good for simple AJAX stuff, but might not be the best for the more advanced features.
%ul
  %li The dream that is the HolyGrail is a full stack (from front-end to back-end) testing suite
  %li It needs helper functions (i.e., it needs a nicer API).
  %li It uses Johnson, which is Ruby wrapped in SpiderMonkey, running on top of ENV JS.
  %li This would be a great project to pursue for improvement.
%p ENV JS - A user-agent written in JavaScript. This can be useful for testing without a browser.
%p Capybara is very popular with this crowd.
%p HTML Unit is a pretty young library, but has some potential. ENV JS, might be a better solution.
%p Front-end testing is important for developers, but can be useful for QA as well.
%b You cannot do serious refactoring without unit tests
%p Jasmine, from PivotalLabs - a mature RSpec-derived JavaScript unit testing script. It runs very fast, but might be hard to setup.
%ul
  %li There is a Jasmine add-on called Evergreen that adds some nice features to Jasmine, but it is not quite ready for prime time.
  %li Jasmine has 2 modes: you can run the tests through your html, OR you can have RSpec generate your html pages on the fly.
  %li The cool part is that you can test by changing yours code, and just refreshing your browser.
  %li Jasmine runs in the browser by default, but you can run it headless using ENV JS.
  %li Evergreen makes setting up Jasmine a LOT easier.
%p You can avoid integration testing (using things like selenium) at your own risk (i.e., this is a bad idea), but these tools are more useful for unit testing your JavaScript.
%p TestSwarm: A website that helps you parallelize your test suite across many browsers.
%p The selenium-client gem gives you access to a more robust toolset than creating point and click tests using the Selenium IDE. It is recommended to use the gem for a more robust testing experience.
%ul
  %li You can still use Selenium IDE to capture the basics of a test, and then refine the test with the selenum-client gem
  %li Capybara can do all the same things as selenium-client, and is browser-agnostic, whereas Selenium IDE is only for Firefox (although the selenium-client is agnostic as well)
%p Hudson - this is a useful group/tool for continuous integration
%p Should there be a Ruby testing blog? (we are agreed that this is a good idea)
%p Fitness, by Uncle Bob, is picking up speed again for managing test reporting using a web interface.
%p What is the ideal testing environment? Something that is exactly like a browser, but headless, and faster than a browser.
%ul
  %li rendering the DOM takes up a lot of time, having a headless solution should speed up testing.
  %li one issue with a headless solution is that you might miss events that trigger while moving to from one place to another (e.g. mouseover events when moving your mouse from one element to another on the screen, which might be unintentional)
  %li HolyGrail is kind of close to this.
%p Testerfield is another tool that is emerging that combines many different testing tools together.

