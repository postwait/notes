%h2 How to get started in Open Source Software
%i Jim (part of RadientCMS core team)
%p Try to solve a problem that bugs you.
%ul
  %li When you are 'fixing' a problem you see in another project, often the maintainer will not agree with your change.
  %li Alternatively, if you are a core member, testing and commiting pull requests can be a pain.
  %li ...or you, as the maintainer, might not agree with the way others write their code.
  %li On the other hand, if you create an improvement, tell people about it, it might be useful.
%p A good thing to do when you do a pull request (in Github.com) is to ping the author when you fix something.
%p Another way to make your pull make sense to the author of a project is to have a detailed commit message, explain what you are doing.
%p Communication is key:
%ul
  %li If the project has an IRC channel, drop in there to chat.
  %li If there is an ML, join it.
%p The more you talk to the author, the more refined your commits can be. Your change might not even be needed if there is another way of doing what you want to do.
%b Don't be afraid to contact the maintainer.
%p The maintainer is (probably) going to be the most enthusiastic developer on the project. More often than not, they will be willing to talk and help.
%p Another good way of taking responsibility in a project is to look at what is happening in a project and merge all the different branches together, then tell the maintainer. That can be really useful for understanding a project.
%p It is a good idea to fork the project you want to work on to make sure that your changes will work for you.
%i Gemcutter is a good gem to contribute to. There are lots of things to do, an active community, and it is easy to get your work committed.
%p Look at the commit log of a project. If you see that a lot of people's commits are being pulled in frequently, then you have a good chance that your commits will be pulled.
%p What about simple points of entry:
%ul
  %li Write documentation. There is ALWAYS a need for documentation.
  %li Few projects have 100% test coverage. Write a test for it.
%p Basically, if you show care about the project, and want to add to the project, the maintainer will (likely) enjoy your help.
%p How do you make your commits pretty so that the maintainer will want your code?
%ul
  %li You can fork the project, do many little commits, and when you are ready, merge your commits together and pull request on that.
  %li A good commit does one thing (or one related set of things)
  %li And the KEY to a commit being pulled: WRITE THE TESTS FOR YOUR COMMITS!
  %li Few maintainers will pull commits that are not well-tested.
%b Take ownership of the project.
%p The good practices for contributing to an OSS project:
%ol
  %li Tackle a problem that bugs you.
  %li Write tests for what you fix.
  %li Describe in detail what you changed and why in your commit message.
  %li Communicate with the maintainer about what you are doing.
  %li Get involved in the community through IRC or email to know what changes are happening.
  %li
    %b Get passionate!