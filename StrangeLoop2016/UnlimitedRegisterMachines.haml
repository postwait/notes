%h2 Unlimited Register Machines, Gödelization and Universality
%i Tom Hall
%p Go read Dan Dennett's books!
%p URM: What is a register. Each register Ri can hold one natural number. It is unlimited, you can hold as many as you like.
%p A program is a finite sequence of instructions.
%p Instructions are (end), (inc n m), and (deb n m p).
%p The state is the program counter, the computation is a seq. of states, and you halt when you hit (end).
%p You also halt when you jump to an instruction that doesn't exist.
%p The goal of the Universal Unlimited Register Machine is to add two numbers together.
%p Wow, this is confusing, but it is really interesting to see how we can make registers do math, and thus do everything.
%p Spoiler: a universal register machine is what we call a computer, but it is the math behind it.
%p Gödelization is formalizing simple systems in math.
%p Tom wrote out this formalization in Clojure.
%p The goal is to encode coding instructions as numbers themselves.
%p (Sorry for the lack 'o notes. I'm out of my depth here. :D)
%p
	%a{:href => "https://proofwiki.org/wiki/Definition:Unlimited_Register_Machine"}Maybe start here on URMs.
%p I have to say, this concept that all programs can be Gödelized into a single number, and then that number can be put into a UURM with a couple numbers to execute the program that is JUST A NUMBER sounds pretty amazing.
%p After forty minutes, I have an inkling of why this is amazing. Pretty heady stuff.
%p Go read "The Universal Computer."
%p Thank you, Tom, for a mind-expanding talk.