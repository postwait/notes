%h2 Type Theory 101 #OSB16 Notes
%i Hanneli Tavante (@hannelita)
%h3 Open Source Bridge 2016 - Day 1 - Session 6
%p There are two types of logic: propositional and predicate logic.
%p How do I evaluate code under Logic? Sometimes the imperative mode of thinking and writing code won't help us in thinking about propositional logic.
%p Functional programming is a good paradigm to allow us to apply logic to our coding.
%p Functional programming have some good resources on how we can think of code.
%p High order functions - Functions that can use functions as inputs and functions as outputs.
%p Reduce - Taking an input as a set and returning a single element as a result (e.g. summing the floors of many building).
%p When you reduce the identity element with a set, you get what is called a Monoid. A Monoid is an element that does not change the final value of a collection reduction.
%p Flatten - flatten takes collections of collections and flattens them into on single-level collection. Very useful.
%p A Monad is an object whose methods return monads. - Jorgen Sch√§fer, think of jQuery's methods that are chainable.
%p The Lambda Calculus - A way of thinking about logical systems using simple functions.
%p "If it's contradictory for no object x to have the property P(x), then there's an object x with property P(x)." - This is where type theory comes in!
%p Type theory tells use that we can derive types from objects using the rules of logic.
%p We can apply formalism to variable naming, typing, and and start to reason logically about our code.
%p IDEs use type theory to do type inference for you.
%p there was a lot here, I fear I didn't do it justice, but great talk!
%p Thank you for the wonderful talk, Hanneli!