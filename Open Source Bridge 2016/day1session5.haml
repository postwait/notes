%h2 Welcoming Communities #OSB16 Notes
%i Gregor Martynus (@gr2m)
%h3 Open Source Bridge 2016 - Day 1 - Session 5
%p Becoming an open source contributor can get...complicated. It is hard to know where to start, and what to even work on.
%p Even if you do find a project you like, it can be hard to get over the fear of contributing.
%p Newcomers are often lambasted for being n00bs. Let's fix this!
%p FOSS contributers shouldn't act like an elite crew, we have to be mush more open to newcomers.
%p How do you do it?
%ol
	%li
		%b Reach out
		%p Check out the @first_tmrs_only and @yourfirstpr twitter accounts to see how you can start to reach out to your user base to get them to help out.
		%p CodeTriage is another great tool you can use to get people excited to fix issues.
		%p Google Sumer of Code and Rails Girls Summer of Code are more great programs that allow you to get your FOSS project out there and in the hands of first timers.
		%p Host events! You can find a space and organize workshops to get newcomers to make their first commits to your project! You can do it!
		%p Share your thoughts! You need to blog, you need to get the word out. You need to engage with the community.
		%p Ask for help! Don't be ashamed to expose your weaknesses. You need more than just tech workers, you need writers, marketers, etc.
		%p Also...create stickers!
	%li
		%b Make it fun
		%p You NEED to create a safe space in your community. Purge toxic people from your project.
		%p You have to be legal. Choose an open source license (Apache2 FTW!).
		%p Be inclusive. Don't separate your "coders" and your "non-coders." We are all equals here.
		%p Use simple language. Be inclusive. Not all your users are native English speakers. Don't be fancy. Caring about wording in your materials matters.
		%p Have ZERO tolerance for abusive language!!!
		%p You need to lower barriers to new contributors. The process of contributing is by far the most challenging part of contributing to open source.
		%p Consider splitting up your code base to make the individual parts of your system easier to contribute to.
		%p Require the minimum amount of tools to get started. You should be able to compile and run your project in two or three commands (i.e. git clone ..., npm install, npm test).
		%p If someone asks to help, assign someone to help them help out. Don't just say, "look at the open issues." That is a major turn off.
	%li
		%b Keep it fun
		%p Here is the rub. If your project is not fun to work on, no one will work on it. It will be doomed to failure.
		%p Make contributions matter. You have to respond to your committers. If they work hard on something and you ignore it, they won't commit again.
		%p Use semantic versioning and semantic-release to make your releases automatic.
		%p Build relationships with your contributers. Call them, in real life! Do a Google+ Hangout. It really helps to build community.
		%p Turn contributors into committers. Committers are the ones that can break your project. You should err on the side of trusting your committers.
		%p Turn committers into maintainers.
		%p Say thank you in public. This should NOT be automated. We are, ultimately, all humans. And shout outs matter!
		%p Be transparent. Don't have discussions on private channels. Publicize your build steps. Let everyone know where your money is coming from.
		%p You cannot scale on good intentions alone. You can't do it all alone, you will burn out.
		%p Google "healthy open source." The article talks about how to maintain a good FOSS system.
%p (easier said than done!)
%p Money in FOSS is great, but it can be poisonous. You have to balance intrinsic versus extrinsic motivation. Be very careful about who you pay and how much they are paid. It is a slippery slope.
%p So you don't want to pay the contributors, you want to pay the people that maintain the infrastructure and organize the volunteers.
%p Remember, code is not all of it. It is everything that helps support the code. You can help out!
%p Thanks, Gregor, for a wonderful talk!