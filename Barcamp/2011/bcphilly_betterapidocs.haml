%h2 Building Better API Documentation
%h2 #bcphilly
%i Daniel Beck, @ddbeck
%p The right things aren't hard to do, but the wrong things are easy to do.
%p RULE #1: Write your own documentation.
%p If you CODED it, write the documentation or it. There are tools out there that claim to generate docs, but really..JavaDocs sucks. RDoc sucks. A COMPUTER cannot document what a HUMAN has to explain.
%p Generated docs are focused around execution, not documentation. It is like giving lat./long. points for navigation instead of street instructions.
%p Your documentation is for PEOPLE, not computers, write them for people.
%p There is a fear, when writing documentation, that you don't want to dumb down your documentation. You might think it is insulting. But actually, it is VERY hard to insult someone with your documentation.
%p "Doc generators and source code viewers without the source."
%p There are three things you need for good documentation:
%ol
  %li
    %p
      %b Tasks:
      You have to tell your users HOW TO USE your software. If you don't tell your users how to use your API, they WON'T use it!
    %p The Django (www.djangoproject.org) docs are a great example of task-based documentation.
  %li
    %p
      %b Topics:
      You can't stop with the HOW, you have to answer the WHY? You must explain to your users why they should use your software.
    %p Topic-based documentation allows you to explain the philosophy of your software. SQLite has some of the best topic-based documentation out there.
    %p That is where you tell the users where to use your software, and where to NOT use your software.
  %li
    %p
      %b References:
      This is about telling your users how to get into the nuts and bolts.
    %p References are all about examples. Flask, a python web framework, has great examples to pull from.
%p The order above matters!
%p Using a tool to test your documentation (like Sphinx for python) that allows you to write testable examples inside your documentation that gets tested when the documentation is build. This is a good way to make sure your documentation doesn't get stale.
%p Better living through documentation. You don't need to be a great writer to make great documentation. The important thing it to merely write, not the quality.
%b Some documentation is better than NO documentation.
%p You don't need to have any fancy tools for writing documentation. A simple text file can do the trick. The important thing is to get your ideas down on paper, and share them.
%p Start documentation your code today! It's not hard to get going, do it. Do it now!
%p Thanks to Daniel for the great talk!
