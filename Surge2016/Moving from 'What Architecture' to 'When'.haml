%h2 Moving from 'What Architecture' to 'When'
%i Joel Tosi
%p Agile doesn't mean "don't plan." It means more planning.
%p What we need to do is understand what architecture to apply when.
%p We build things, so we have to understand what we are building.
%p There is no such thing as the perfect architecture is useless.
%p On the other side, you cannot get it perfect, stop trying. Make systems that are flexible enough to adapt to change.
%p When are the decisions of architecture needed and when do we need to just get things done?
%p What happens when bad things happen? That needs to be a part of how we think of our systems.
%p "We don't document" is NOT an agile thing. Agile is NOT about doing less work. If you don't document, you lose thought.
%p Architecture was never meant to be about frameworks.
%p Tech debt is not a bad thing, it is just something that needs to be addressed at a later time.
%p Tech debt is the delta of your understanding now and your understanding then.
%p Architecture is not a static thing. It evolves as we gain knowledge of our system and business need.
%b Go read Notes on the Synthesis of Form by Christopher Alexander.
%p When there are only four decision points, architecture would be simple. But real problems are much more complex.
%p What we do, then is to try and create logical groupings of things and design around them.
%p What actually happens is, we often get stuck up in thinking around the buzzwords and not the problem space. We have a biased simplification of what will happen.
%p Most of the stuff we have is not simple. It is not easy. And we get biased by the solutions we use. We get biased by time constraints.
%p But you can't just say "it's to hard, let's figure it out as we go." That's a horrible idea.
%p When are the questions of architecture relevant? When will they matter. When will they not matter at all.
%p What are the scenarios that are critical to get right? We need to define those to have real answers to our questions.
%p When you mean "speed" what do you mean speed? We have to really define our systems in real terms. You have to have a common context to the terms we use. Those words matter.
%b We need to make intentional decisions.
%p Decision points go from really cheap to really expensive. Our job as architects is to move decisions from very expensive to very cheap.
%p There are known and uncertain problems, and isolated and dependent problems. When you graph the two you get a more nuanced approach to understand what you need to do first.
%b It is really easy to build microservices wrong.
%p We all run towards the bright shiny objects. You have to think about what you want to build versus how it will be used.
%p Don't fall into the trap of Resume Driven Development.
%p Good engineering practices will always bring good architecture. Bad engineering practices will always bring good architecture to its knees.
%b Don't use Docker just because it is the cool thing to use. Fix your engineering problems first.
%p OMG. Stop trying to fit everything into microservices and docker and all those buzzwords. Use the tools and technology that fits the business solution.
%p Microservices are trash if you don't design well.
%p What if you were wrong? You should ask yourself and your team, what if you are wrong. If you are not asking yourself that, you will be biased by your own thoughts.
%p Think before you write a system. Products have product assumptions. You have to document your product assumptions as well as your technical assumptions.
%p For each tech assumption, think of three ways you might be wrong. For each way you might be wrong, think about what you would change.
%p Ground your decisions. Ground them in business value. You cannot just buy a tool and be "agile" or "devops."
%p You have to think about what it is all about, what is the why behind what you are doing.
%b Tools and frameworks are all super volatile.
%p Your architecture is never going to be right. It is the best understanding of the problem space we have right now. It will evolve.
%p Document your assumptions and revisit them.
%p Are your constraints necessary or accidental? There are a LOT of constraints that are not actually real.
%p Are your constraints assumes or real? "I can never touch their codebase." That is an assumed constraint. STOP ASSUMING.
%p Would new constraints help your decisions? Will the cool new hotness really help you?
%p Will automating everything really help you right now? You need to ask the question first. Do not start with the answer. Start with the question.
%p If you are an architect and someone tells you years later that your decision has made their life easier. That is what it is all about. That is the joy of the job.
%b Read everything be Jerry Weinberg. Especially "Are Your Lights On?"
%p Thank you, Joel, for an amazing talk!!!